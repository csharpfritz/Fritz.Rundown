@model FollowerGoalConfiguration
<div class="py-5 text-center">
	<h2>Configure Follower Goal</h2>
	<p class="lead">
		Fill out the options below to generate a customized url to show off your follower goal.
	</p>
</div>

<div class="row">
	<div class="col-md-12 mb-6">
		Preview:
		<iframe id="widgetPreview" name="widgetPreview" scrolling="no"></iframe>
	</div>
</div>

<div class="row">
	<div class="col-md-6 mb-3">
		<label asp-for="Caption"></label>
		<input class="form-control" type="text" asp-for="Caption"  />
	</div>
	<div class="col-md-6 mb-3">
		<label asp-for="FontName"></label>
		<input class="form-control" type="text" asp-for="FontName" />
		<div id="fontsPanel">
			<label for="fontname"></label> <select id="fontNames" size="5"></select>
			<br />
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-6 mb-3 form-group">
		<label asp-for="Goal"></label>
		<input class="form-control" type="number" asp-for="Goal" value="100" />
	</div>
	<div class="col-md-6 mb-3 form-group">
		<label asp-for="CurrentValue"></label>
		<input class="form-control" type="number" asp-for="CurrentValue" />
	</div>
</div>

<div class="row">
	<div class="col-md-6 mb-3 form-inline">
		<label asp-for="EmptyBackgroundColor"></label>
		&nbsp;
		<input type="color" asp-for="EmptyBackgroundColor" value="#CCCCCC" />
	</div>
	<div class="col-md-6 mb-3 form-inline">
		<label asp-for="EmptyFontColor"></label>
		&nbsp;
		<input type="color" asp-for="EmptyFontColor" />
	</div>
</div>

<div class="row">
	<div class="col-md-12 mb-3">
		<label>Fill Bar Colors</label>
		<div id="bgcolors" class="form-row">
			<div name="spanBGColor" style="display: inline-block;" class="col-md-3">
				<div class="input-group mb-2">
					<div class="input-group-prepend">
						<div class="input-group-text"><input id="bgcolor1" type="color" title="Choose one or more colors for the fill bar" value="#0000CC" class="form-control" /></div>
					</div>
					<input id="bgblend1" class="form-control" type="number" name="bgblend" value="1" title="How much of the color gets blended 0->1. Not used on the last color." />
					<div class="input-group-append">
						<div class="input-group-text btn btn-danger" onclick="removeColor()" title="Remove this color from the list."><i class="far fa-trash-alt"></i></div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="row mb-3">
	<div class="col-sm-12 col-md-12">
		<button class="btn btn-secondary" onclick="addColor()" title="Add another color picker to the end of the list."><i class="fas fa-plus-circle"></i></button>
	</div>
</div>

<button id="preview" class="btn btn-lg btn-primary btn-block mb-3">Preview</button>

<div class="alert alert-info">
	<h4 class="alert-heading">Here is your URL:</h4>
	<p><a id="outputUrl" href="#" target="_blank"></a></p>
</div>

@section scripts {
	<script type="text/javascript">
<!--
		var supportedFonts = [];

		var log = function (message, params) {
			// console.log(message, params);

		};


		const ConfigurationModel = {
			Caption: "@nameof(Model.Caption)",
			Goal: "@nameof(Model.Goal)",
			FontName: "@nameof(Model.FontName)",
			CurrentValue: "@nameof(Model.CurrentValue)",
			EmptyBackgroundColor: "@nameof(Model.EmptyBackgroundColor)",
			EmptyFontColor: "@nameof(Model.EmptyFontColor)"
		};



	// "fontname",
		const quickPreviewTextBoxes = ["preview", ConfigurationModel.Caption,
			ConfigurationModel.Goal,
			ConfigurationModel.CurrentValue,
			ConfigurationModel.EmptyBackgroundColor,
			ConfigurationModel.EmptyFontColor,
			"bgcolor1", "bgblend1"];

		var isLoadingFromStorage = false;

		(function () {

			document.getElementById('fontsPanel').style.display = 'none';

			onload();

			loadPreview();

			for (var tb of quickPreviewTextBoxes) {
				document.getElementById(tb).onclick = loadPreview;
			}

			function onload() {

				isLoadingFromStorage = true; 

				const bgArray = new Array();

				for (var i = 0; i < localStorage.length; i++) {
					var key = localStorage.key(i);
					const item = localStorage.getItem(key);

					if (key === 'supportedFonts') {

						log("setting supported fonts from local storage");
						const fonts = JSON.parse(item);
						setSupportedFonts(fonts);
						continue;

					}

					log(key, item);

					// store an array of all the required color pickers
					if (key.substr(0, 2) == "bg") {
						bgArray.push(key);
					} else {

						var el = document.getElementById(key);
						if (el) {
							el.value = item;
						}
					}

				}

				const sortedArray = bgArray.sort();

				for (var i of sortedArray) {

					if (i.substr(0, 7) == "bgcolor") {

						if (!document.getElementById(i)) {
							var key = i.substr(7);
							addColor(key);
						}

					}

				}

				for (var i of sortedArray) {

					var el = document.getElementById(i);
					if (el) {
						el.value = localStorage.getItem(i);
					}

				}

				if (supportedFonts.length == 0)
					googleFontsAdapter(setSupportedFontsFromApi);

				isLoadingFromStorage = false; 

			}

		})();

		function loadPreview() {

				if (isLoadingFromStorage) return; 

				const iframeWidth = document.getElementById("widgetPreview").clientWidth - 40;
				const fontName = document.getElementById(ConfigurationModel.FontName).value;

				if (supportedFonts.length > 0 && filterFontList(supportedFonts, fontName, filterExactMatchOperation).length !== 1) {
					alert('Font not supported by Google Fonts');
					return;
				}

				var urlTemplate = "/followers/goal/";
				urlTemplate += `${document.getElementById(ConfigurationModel.Goal).value}/`;
				urlTemplate += `${document.getElementById(ConfigurationModel.Caption).value}`;
				urlTemplate += `?width=${iframeWidth}`;
				urlTemplate += getBgColors();
				urlTemplate += getBgBlend();
				urlTemplate += `&EmptyBackgroundColor=${escape(document.getElementById(ConfigurationModel.EmptyBackgroundColor).value)}`;
				urlTemplate += `&emptyFontColor=${escape(document.getElementById(ConfigurationModel.EmptyFontColor).value)}`;
				urlTemplate += `&fontName=${escape(fontName)}`;

				document.getElementById("widgetPreview").src = urlTemplate + `&currentValue=${document.getElementById(ConfigurationModel.CurrentValue).value}`

        log(urlTemplate);

				document.getElementById("outputUrl").textContent = urlTemplate;
				document.getElementById("outputUrl").href = urlTemplate;
				saveValues();

			};

			function saveValues() {

				localStorage.clear();

				const elements = Array.from(document.getElementsByTagName("input"));
				for (let el of elements) {

					log(`Saving value: ${el.id}: ${el.value}`);

					localStorage.setItem(el.id, el.value);

				}

				localStorage.setItem('supportedFonts', JSON.stringify(supportedFonts));

			}

			// build the bgcolors parameter
			function getBgColors() {
				const spans = document.getElementsByName("spanBGColor");
				var result = "";
				if (spans) {
					for (let i = 0; i < spans.length; i++) {
							result += `,${escape(spans[i].getElementsByTagName('input')[0].value)}`;
					}
					result = `&FillBackgroundColor=${result.substr(1)}`;
				}
				return result;
			}

			// build the bgblend parameter
			function getBgBlend() {
					const spans = document.getElementsByName("spanBGColor");
				var result = "";
				if (spans) {
					for (let i = 0; i < spans.length; i++) {
							result += `,${spans[i].getElementsByTagName('input')[1].value}`;
					}
					result = `&FillBackgroundColorBlend=${result.substr(1)}`;
				}
				return result;
			}

			// retrieve the supported font names from google api
			function googleFontsAdapter(setter) {
		@*Reference for the HTTP in vanilla JS https://www.sitepoint.com/guide-vanilla-ajax-without-jquery/*@
				let api = 'https://www.googleapis.com/webfonts/v1/webfonts?key=@ViewBag.GoogleFontsApiKey';

				@if (string.IsNullOrEmpty(ViewBag.GoogleFontsApiKey))
				{
					@:setter([{ 'family': 'Abel' }, { 'family': 'Abril Fatface' }, { 'family': 'Acme' }, { 'family': 'Alegreya' }, { 'family': 'Alex Brush' }, { 'family': 'Amaranth' }, { 'family': 'Amatic SC' }, { 'family': 'Anton' }, { 'family': 'Arbutus Slab' }, { 'family': 'Architects Daughter' }, { 'family': 'Archivo' }, { 'family': 'Archivo Black' }, { 'family': 'Arima Madurai' }, { 'family': 'Asap' }, { 'family': 'Bad Script' }, { 'family': 'Baloo Bhaina' }, { 'family': 'Bangers' }, { 'family': 'Berkshire Swash' }, { 'family': 'Bitter' }, { 'family': 'Boogaloo' }, { 'family': 'Bree Serif' }, { 'family': 'Bungee Shade' }, { 'family': 'Cantata One' }, { 'family': 'Catamaran' }, { 'family': 'Caveat' }, { 'family': 'Caveat Brush' }, { 'family': 'Ceviche One' }, { 'family': 'Chewy' }, { 'family': 'Contrail One' }, { 'family': 'Crete Round' }, { 'family': 'Dancing Script' }, { 'family': 'Exo 2' }, { 'family': 'Fascinate' }, { 'family': 'Francois One' }, { 'family': 'Freckle Face' }, { 'family': 'Fredoka One' }, { 'family': 'Gloria Hallelujah' }, { 'family': 'Gochi Hand' }, { 'family': 'Great Vibes' }, { 'family': 'Handlee' }, { 'family': 'Inconsolata' }, { 'family': 'Indie Flower' }, { 'family': 'Kaushan Script' }, { 'family': 'Lalezar' }, { 'family': 'Lato' }, { 'family': 'Libre Baskerville' }, { 'family': 'Life Savers' }, { 'family': 'Lobster' }, { 'family': 'Lora' }, { 'family': 'Luckiest Guy' }, { 'family': 'Marcellus SC' }, { 'family': 'Merriweather' }, { 'family': 'Merriweather Sans' }, { 'family': 'Monoton' }, { 'family': 'Montserrat' }, { 'family': 'News Cycle' }, { 'family': 'Nothing You Could Do' }, { 'family': 'Noto Serif' }, { 'family': 'Oleo Script Swash Caps' }, { 'family': 'Open Sans' }, { 'family': 'Open Sans Condensed' }, { 'family': 'Oranienbaum' }, { 'family': 'Oswald' }, { 'family': 'PT Sans' }, { 'family': 'PT Sans Narrow' }, { 'family': 'PT Serif' }, { 'family': 'Pacifico' }, { 'family': 'Patrick Hand' }, { 'family': 'Peralta' }, { 'family': 'Permanent Marker' }, { 'family': 'Philosopher' }, { 'family': 'Play' }, { 'family': 'Playfair Display' }, { 'family': 'Playfair Display SC' }, { 'family': 'Poiret One' }, { 'family': 'Press Start 2P' }, { 'family': 'Prosto One' }, { 'family': 'Quattrocento' }, { 'family': 'Questrial' }, { 'family': 'Quicksand' }, { 'family': 'Raleway' }, { 'family': 'Rancho' }, { 'family': 'Righteous' }, { 'family': 'Roboto' }, { 'family': 'Roboto Condensed' }, { 'family': 'Roboto Slab' }, { 'family': 'Rubik' }, { 'family': 'Rye' }, { 'family': 'Satisfy' }, { 'family': 'Shadows Into Light' }, { 'family': 'Shojumaru' }, { 'family': 'Sigmar One' }, { 'family': 'Skranji' }, { 'family': 'Slabo 27px' }, { 'family': 'Special Elite' }, { 'family': 'Tinos' }, { 'family': 'Ultra' }, { 'family': 'UnifrakturMaguntia' }, { 'family': 'VT323' }, { 'family': 'Yanone Kaffeesatz' }]);
					@:return;
				}

				let xhr = new XMLHttpRequest();
				xhr.open('GET', api);
				xhr.send(null);

				log('Calling google fonts api');

				xhr.onreadystatechange = function() {
					let DONE = 4; // readyState 4 means the request is done.
					let OK = 200; // status 200 is a successful return.
					if (xhr.readyState === DONE) {
						if (xhr.status === OK)
							setter(JSON.parse(xhr.responseText).items); // 'This is the returned text.'
						else
							log('Error: ' + xhr.status); // An error occurred during the request.
					}
				}
			}

			function setSupportedFonts(fonts) {
				localStorage.setItem('supportedFonts', JSON.stringify(supportedFonts));
				updateFontList(filterFontList(supportedFonts));
			}

			function setSupportedFontsFromApi(fonts) {
				supportedFonts = fonts.map((v) => v.family);
				setSupportedFonts(supportedFonts);
			}

			function filterExactMatchOperation(currentItem, searchValue) {
				return !searchValue || currentItem === searchValue;
			}

			function filterPartialMatchOperation(currentItem, searchValue) {
				return !searchValue || currentItem.indexOf(searchValue) > -1;
			}

			function filterFontList(fonts, searchValue, searchOperation = filterPartialMatchOperation) {
				return fonts.filter(function (currentItem) { return searchOperation(currentItem, searchValue); });
			}

			function createCssLinkTag(encoded) {

				if (document.getElementById(`font-${encoded}`))
					return;

				const l = document.createElement('link');
				l.type = 'text/css';
				l.rel = 'stylesheet';
				l.id = `font-${encoded}`;
				l.href = `https://fonts.googleapis.com/css?family=${encoded}`;

				document.getElementsByTagName('head')[0].appendChild(l);

			}

			function createFontOption(fontFamily) {

				const option = document.createElement("option");
				option.style.fontFamily = fontFamily;
				option.text = fontFamily;
				return option;

			}

			function updateFontList(fonts) {

				const control = document.getElementById('fontNames');
				control.innerHTML = '';

				for (let current of fonts) {
					const encoded = encodeURI(current);

					createCssLinkTag(encoded);

					control.add(createFontOption(current));
				}

			}

			document.getElementById(ConfigurationModel.FontName).onkeyup = function (d) {

				// UP: 38,  DOWN: 40
				const keyCodeTab = 9;
				const keyCodeEnter = 13;

				if (d.keyCode == keyCodeEnter || d.keyCode == keyCodeTab) {
					log("Selecting the current font..");
					document.getElementById('fontsPanel').style.display = 'none';
					loadPreview();
					return;

				}

				// log(d.keyCode);
				if (
					d.keyCode != 8
					&& d.keyCode != 32
					&& d.keyCode != 46
					&& (
						d.keyCode < 65
						|| d.keyCode > 90)
				)
					return;
				document.getElementById('fontsPanel').style.display = '';
				updateFontList(filterFontList(supportedFonts, this.value));

			};

			document.getElementById('fontNames').onchange = function () {

				document.getElementById('fontsPanel').style.display = 'none';
				document.getElementById('fontname').value = this.value;

				loadPreview();

				};

		function addColor(key) {

			key = key || null;
			const spans = document.getElementsByName("spanBGColor");
			if (spans) {
				const addButton = spans[spans.length - 1].nextSibling,
					newNode = spans[spans.length - 1].cloneNode(true),
					bgColorField = newNode.getElementsByTagName('input')[0],
					bgBlendField = newNode.getElementsByTagName('input')[1];

				bgColorField.id = key ? `bgcolor${key}` : `bgcolor${spans.length + 1}`;
				bgColorField.onchange = loadPreview;
				bgBlendField.id = key ? `bgblend${key}` : `bgblend${spans.length + 1}`;
				bgBlendField.onchange = loadPreview;

				addButton.parentNode.insertBefore(newNode, addButton);
				newNode.getElementsByClassName("input-group-text btn btn-danger")[0].onclick = removeColor;
				loadPreview();
			}
		}

		function removeColor() {
				if (this === window) return;

				this.closest('[name=spanBGColor]').remove();
				renumberColors();
				loadPreview();
		}

		function renumberColors() {
			const spans = document.getElementsByName("spanBGColor");
			for (let i = 0; i < spans.length; i++) {
				spans[i].getElementsByTagName('input')[0].id = `bgcolor${i + 1}`;
				spans[i].getElementsByTagName('input')[1].id = `bgblend${i + 1}`;
			}
		}




//-->
	</script>
}

@section styles {
	<style>

		label:after {content: ":"}

		#bgcolors .input-group-prepend .input-group-text {
			background-color: inherit;
			color: inherit;
		}
	</style>
}