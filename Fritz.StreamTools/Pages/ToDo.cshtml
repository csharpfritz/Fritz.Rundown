@page
@model Fritz.StreamTools.Pages.SentimentModel
@{
}
<!DOCTYPE html>

<html>
<head>
	<meta name="viewport" content="width=device-width" />
	<title>Sentiment</title>
	@*<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/solid.css" integrity="sha384-TbilV5Lbhlwdyc4RuIV/JhD8NR+BfMrvz4BL5QFa2we1hQu6wvREr3v6XSRfCTRp" crossorigin="anonymous">
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/fontawesome.css" integrity="sha384-ozJwkrqb90Oa3ZNb+yKFW2lToAWYdTiF1vt8JiH5ptTGHTGcN7qdoR1F95e0kYyG" crossorigin="anonymous">*@
	<link rel="stylesheet" href="~/css/site.css" />
	<script src="https://kit.fontawesome.com/8ac2e0bf60.js" crossorigin="anonymous"></script>
</head>
<body>  
	<ul id="todos">

	</ul>


	<script src="~/lib/signalr/signalr-client.js"></script>
	<script>
		(function () {

			this._hub = new signalR.HubConnectionBuilder()
				.withUrl("/obshub")
				.withHubProtocol(new signalR.protocols.msgpack.MessagePackHubProtocol())
				.build();

			this._hub.onclose(() => {
				if (this.debug) console.debug("hub connection closed");

				// Hub connection was closed for some reason
				let interval = setInterval(() => {
					// Try to reconnect hub every 5 secs
					this.start(groups).then(() => {
						// Reconnect succeeded
						clearInterval(interval);
						if (this.debug) console.debug("hub reconnected");
					});
				}, 5000);
			});

			this._hub.on('todo_new', (id, text) => {
				if (this.debug) console.debug("New ToDo", { id, text });
			});
			this._hub.on('todo_done', (id) => {
				if (this.debug) console.debug("Done ToDo", { id });
				if (this.onSentiment) this.onSentiment(newSentiment, oneMinute, fiveMinute, all);
			});

			return this._hub.start();

			var sentimentEl = document.getElementById("currentSentiment");
			var gauge = document.getElementById("constrain");

			hub.onSentiment = (instant, oneMinute, fiveMinute, all) => {

				console.log({
					instant: instant,
					oneMinute: oneMinute,
					fiveMinute: fiveMinute,
					all: all
				});

				gauge.style.width = `${oneMinute * 300}px`;
				var trendClass = (fiveMinute < oneMinute) ? "fas fa-arrow-up" : (fiveMinute != oneMinute) ? "fas fa-arrow-down" : "fa fa-arrows-h";
				sentimentEl.innerHTML = `<i class="${trendClass}"></i>  ${(oneMinute * 100).toFixed(1)}%`;

			}

			hub.start("sentiment");

		})();
	</script>
</body >
</html >
